문제 1.
    interface IRunnable
    {
        void Run();
    }
    interface IFlyable
    {
        void Fly();
    }

    class FlyingCar : IRunnable, IFlyable
    {
        public void Run() => Console.WriteLine("Run");
        public void Fly() => Console.WriteLine("Fly");
    }

    internal class Program
    {
        static void Main()
        {
            FlyingCar car = new FlyingCar();
            car.Run();
            car.Fly();

            IRunnable runnable = car as IRunnable;
            runnable.Run();

            IFlyable flyable = car as IFlyable;
            flyable.Fly();
        }
    } */
문제 2.
    Interface를 이용하여 느슨한 커플링을 이용하는 기법이 있다.
    유니티에서 이 기법에 대하여 정확하게 설명하세요.
        답 : 
            클래스 간의 의존성을 줄여 시스템의 유연성과 확장성을 높이는데 도움을 줌.
            유니티에서 인터페이스를 사용하면 서로 다른 클래스가 동일한 인터페이스를 구현함으로써,
            특정 기능을 수행하는 객체를 쉽게 교체하거나 확장할 수 있음.
            
문제 3.
    인터페이스 스크립트는 컴포넌트로써 유니티 오브젝트에 붙일 수 있는가? 없다면 그 이유는 무엇인지 적으세요.
        답 :
            못 붙인다.
            인터페이스는 객체로 생성할 수 없다.
            유니티는 객체로 생성하는 대신, 컴포넌트로써 오브젝트에 추가되는데,
            인터페이스는 컴포넌트로 추가될 수 없다.

문제 4.
    아래 코드를 보고 유추하여 빈칸에 원래 있어야 될 추상클래스를 만드세요.
        // Define an abstract class 여기 밑에 추상 클래스를 구현 하세요
        

        // Derived class that implements the abstract class
        public class Circle : Shape
        {
            public double Radius { get; set; }

            public Circle(double radius)
            {
                Radius = radius;
            }

            public override double CalculateArea()
            {
                return Math.PI * Radius * Radius;
            }
        }

        public class Rectangle : Shape
        {
            public double Width { get; set; }
            public double Height { get; set; }

            public Rectangle(double width, double height)
            {
                Width = width;
                Height = height;
            }

            public override double CalculateArea()
            {
                return Width * Height;
            }
        }

        namespace ConsoleApp1
        {
            internal class Program
            {
                static void Main(string[] args)
                {
                    Shape circle = new Circle(5);
                    circle.Display();
                    Console.WriteLine("Circle Area: " + circle.CalculateArea());

                    Shape rectangle = new Rectangle(4, 6);
                    rectangle.Display();
                    Console.WriteLine("Rectangle Area: " + rectangle.CalculateArea());
                }
            }
        }

    답 : 
        public abstract class Shape
        {
            public abstract double CalculateArea();
            public virtual void Display() { }
        }

        // Derived class that implements the abstract class
        public class Circle : Shape
        {
            public double Radius { get; set; }

            public Circle(double radius)
            {
                Radius = radius;
            }

            public override double CalculateArea()
            {
                return Math.PI * Radius * Radius;
            }
        }

        public class Rectangle : Shape
        {
            public double Width { get; set; }
            public double Height { get; set; }

            public Rectangle(double width, double height)
            {
                Width = width;
                Height = height;
            }

            public override double CalculateArea()
            {
                return Width * Height;
            }
        }

        internal class Program
        {
            static void Main(string[] args)
            {
                Shape circle = new Circle(5);
                circle.Display();
                Console.WriteLine("Circle Area: " + circle.CalculateArea());

                Shape rectangle = new Rectangle(4, 6);
                rectangle.Display();
                Console.WriteLine("Rectangle Area: " + rectangle.CalculateArea());
            }
        }