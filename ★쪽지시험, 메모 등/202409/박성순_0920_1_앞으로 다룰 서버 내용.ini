앞으로 배울 내용
    서버 기초
    멀티 쓰레드 다루기
    컴파일러 최적화
    캐시 이론
    메모리 배리어
    Interlocked
    Lock 기초
    Deadlock
    Lock 구현
    Spin Lock
    ContextSwitching
    AutoResetEvent
    ReaderWriterLock 구현
    Thread Local Storage
    C# 으로 간단한 서버 구성

서버란 무엇인가
    다른 PC에서 연결이 가능하도록 대기상태로 상시 실행되는 프로그램
    ex) 영업 중인 식당과 유사. 손님이 오면 음식을 제공하고, 손님이 없으면 대기 상태로 대기
    AutoScaling 정책
        서버의 부하가 증가하거나 감소할 때 자동으로 서버 인스턴스를 생성하거나 제거하는 정책
        서버의 성능을 최적화하고 비용을 절감하는데 사용
        Aws, Azure, Google Cloud 등에서 제공
    서버의 종류
        웹 (HTTP, HTTPS) :
            웹 브라우저를 통해 접속하는 서버.
            약간 질의 응답 형태로 동작. 요청을 하고 응답을 받으면 연결이 끊김.
            매우 드물게 정보를 요청, 갱신하는 경우가 있음.
            ex) 구글, 네이버, 다음
        데이터베이스 :
            데이터를 저장하고 관리하는 서버
            ex) MySQL, Oracle, MSSQL
        파일 :
            파일을 저장하고 관리하는 서버
            ex) FTP, SFTP
        게임 :
            게임을 제공하는 서버.
            웹과는 다르게 실시간으로 데이터를 주고 받으며, 연결이 끊기지 않음.
            상호작용이 가능하며, 다수의 사용자가 동시에 접속 가능
        채팅 :
            채팅을 제공하는 서버
            ex) 카카오톡, 라인
        메일 :
            이메일을 송수신하는 서버
            ex) Gmail, Outlook
        프록시 :
            클라이언트와 서버 사이에서 중계 역할을 하는 서버
            ex) Squid, HAProxy

    게임 서버 제작
        게임 장르에 따라 요구사항이 너무나 다름
        최적의 서버를 만들기 위해서는 게임의 특성을 잘 파악해야 하는데, 최적의 프레임워크를 찾기란 쉽지 않음

    MMORPG 게임 서버
        비유하자면 식당 운영과 비슷한데,
        멀티쓰레드 : 여러 손님이 동시에 음식을 주문하고, 요리사가 여러 손님에게 동시에 음식을 제공
            or 직원을 고용하여 여러 손님에게 동시에 음식을 제공
        네트워크 : 손님과 요리사가 서로 소통하는 방법
        데이터베이스 : 손님의 주문 내역을 저장하고, 요리사가 요리한 음식의 내역을 저장 등
        게임 로직 : 손님의 주문을 받고, 요리사에게 요리를 시키고, 요리사가 요리를 하고, 손님에게 음식을 제공하는 등의 게임 내 로직
        서버 구조 : 식당의 구조를 어떻게 설계할 것인가

        게임 프로그래머라면 위의 웹, 게임서버를 각각 만들 수 있어야 하므로, 서버 프로그래밍을 잘 알아야 함

C#
    멀티쓰레드 입문
        서버는 멀티쓰레드를 활용해야 하는데, 멀티쓰레드를 알기 위하여 컴퓨터 구조 원리 등 운영체제에 대한 기본적인 지식이 필요
    
    커널 (Kernel) :
        운영체제의 핵심 부분
        하드웨어를 제어하고, 응용 프로그램이 하드웨어를 사용할 수 있도록 인터페이스를 제공
        프로세스 관리, 메모리 관리, 파일 시스템 관리, 네트워크 관리 등을 담당
        운영체제의 핵심 기능을 담당하는 프로그램
    
    직접 쓰레드를 새로 생성하는 경우는 거의 드물며, (대부분의 경우는 ThreadPool을 사용.)
    하지만 고정적인 메모리를 계속하여 사용하는 경우에는 쓰레드를 직접 생성하여 사용하는 것이 좋음
    
    ThreadPool을 사용하는 경우는 쓰레드를 생성하고 삭제하는 과정이 반복되어 메모리를 계속해서 사용하게 되므로,
    위와 같은 경우라면 메모리를 절약하기 위해 쓰레드를 직접 생성하여 사용하는 것이 좋음.
    또한 ThreadPool은 쓰레드를 회수하는 과정에서 쓰레드를 종료시키는데, 이 과정에서 쓰레드가 종료되지 않는 경우가 발생할 수 있음.
    
    Task를 쓰는 경우, (제한된 쓰레드를 유연하게 사용할 수 있음.)
    잠깐 쓰려고 했으나 다시 사용할 수 있도록 하는 것이 ThreadPool과 Task의 차이점이라고 할 수 있음.