C#
    Thread
        메모리 배리어 (Memory Barrier)
            CPU 의 명령어 실행 순서를 제어하는 명령어
            메모리 배리어를 사용하면 CPU 의 명령어 실행 순서를 제어할 수 있음

        경쟁 조건 (Race Condition)
            둘 이상의 스레드가 공유 자원에 접근할 때, 그 결과가 의도치 않게 나타나는 상황
            경쟁 조건을 방지하기 위해 Lock 을 사용

        Lock :
            동기화를 위한 방법 중 하나
            Critical Section 에서만 사용 가능
            Monitor.Enter() 와 Monitor.Exit() 로 사용

        DeadLock (데드락) :
            두 개 이상의 스레드가 서로 상대방의 작업이 끝나기만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태
            데드락을 방지하기 위해 Lock 을 사용할 때, Lock 을 걸 때 순서를 정해놓고 걸어야 함

            Mutal Exclusive (상호 배타) :
                C# 에서는 Critical Section, C++ 에서는 std::mutex 라고 부름
                둘 이상의 스레드가 동시에 공유 자원에 접근하지 못하도록 하는 것

            Hold and Wait (점유 대기) :
                데드락의 4가지 조건 중 하나
                자원을 가지고 있는 상태에서 다른 자원을 기다리는 상태

            No Preemption (비선점) :
                데드락의 4가지 조건 중 하나
                다른 스레드가 점유한 자원을 강제로 뺏을 수 없는 상태

            Circular Wait (순환 대기) :
                데드락의 4가지 조건 중 하나
                두 개 이상의 스레드가 서로 상대방의 작업이 끝나기만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태
        
        Spin Lock (스핀 락) :
            Lock 을 획득할 때까지 계속해서 Lock 을 시도하는 방식
            Lock 을 획득할 때까지 계속해서 CPU 를 사용하기 때문에 CPU 가 많이 사용됨
            Lock 을 획득하는 시간이 짧을 때 사용

        Context Switching (문맥 교환) :
            CPU 가 여러 개의 프로세스나 스레드를 실행할 때, CPU 가 실행 중인 프로세스나 스레드를 다른 프로세스나 스레드로 교체하는 것
            Context Switching 이 일어나면 CPU 가 다른 프로세스나 스레드로 교체되기 때문에 성능이 저하됨
        
        AutoResetEvent (자동 리셋 이벤트) :
            스레드 간의 신호를 주고 받을 때 사용
            Set() 으로 신호를 보내고, WaitOne() 으로 신호를 받음