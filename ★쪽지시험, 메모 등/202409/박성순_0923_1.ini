C#
    1.  멀티 쓰레드 개론 : 커널, 쓰레드, ThreadPool, Task 둥
    
    2.  쓰레드 생성 : Thread 클래스

    3.  캐시 이론 : 쓰레드의 동작 방식

    4.  메모리 배리어 (Memory Barrier) : 쓰레드 간의 메모리 가시성을 보장하기 위한 방법
        Barrier 명령문은 전후의 메모리 연산을 순서에 맞게 실행하도록 보장(강제)하는 역할을 합니다.
        즉, Barrier 명령문을 만나면 이전 명령문이 완료된 후에 다음 명령문을 실행하도록 보장합니다.

        메모리 배리어는 현대 CPU가 성능을 높이기 위해 최적화를 거쳐 명령문의 순서를 바꾸는 경우가 있어서 이를 방지하기 위해 사용합니다.
        이러한 메모리 연산의 재배치는 싱글쓰레드에서는 알아채기 힘들지만, 제대로 관리되지 않는 한 병행적으로 동작하는 프로그램과 디바이스 드라이버에서는 문제가 될 수 있습니다.
        싱글쓰레드에서는 하드웨어가 명령어 통합을 하기 때문에 문제가 없지만, 병행적으로 동작하는 프로그램에서는 문제가 될 수 있습니다.

        정리하자면, 성능을 높이기 위해 명령문의 순서를 바꾸는 것을 방지하기 위해 메모리 배리어를 사용합니다.

    5.  컴파일러 최적화 :
        현재 항상 Debug모드로 실행하고 있으나, Release 모드로 실행할 경우 컴파일러가 최적화를 하게 되어 쓰레드 간의 메모리 가시성이 보장되지 않을 수 있음.
        따라서, 메모리 배리어를 사용하여 쓰레드 간의 메모리 가시성을 보장해야 함.

    6.  락 (Lock) : 쓰레드 간의 경쟁 상황을 해결하기 위한 방법
