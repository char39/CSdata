유니티
    9/13 14:00 내일 할 일
        게임 알고리즘 평가. (선형 탐색, 이진 탐색, 버블 정렬, 재귀 함수 등)

    오늘 할 일
        부위 별 애니메이션 적용하는 방법 알아보기
        달리는 애니메이션 중에 수류탄을 던지는 애니메이션 구현 (Avatar Mask 사용)


    코드 작성시 지켜야 될 5가지 기본 원칙 (Solid 원칙)
        1. 단일 책임 원칙 (Single Responsibility Principle) :
            한 클래스는 하나의 책임만 가져야 한다.
            단일 기능 단위로 분리 하였으니 코드의 길이가 짧고 명확하며 유지보수가 쉬워진다.
            하나의 기능으로만 이루어졌기에 이 클래스를 상속받아 확장하기 쉽다.
            단일기능으로 이루어져 모듈식으로 여러부분에서 재사용 가능하다.

        2. 개방 폐쇄 원칙 (Open Closed Principle) :
            확장에는 열려 있어야 하고, 변경(수정)에는 닫혀 있어야 한다.
            새로운 기능이 추가되거나 변경되어도 기존의 코드는 수정되지 않아야 하며, 기존의 코드를 수정하지 않고 새로운 기능을 추가할 수 있도록 설계해야 한다.
            예를 들어 원본 코드를 수정하지 않고 새로운 기능을 추가하려면 상속을 사용하면 된다.
            이렇게 하면 새로운 기능을 추가할 때 기존의 코드를 수정하지 않아도 되며, 새로운 클래스를 추가하여 원본 클래스를 상속받아 사용할 수 있다.
            또한 인터페이스를 사용하는 방법도 있다. 인터페이스를 사용하면 클래스의 구현을 변경하지 않고 완전 새로운 기능을 추가할 수 있다.

        3. 리스코프 치환 원칙 (Liskov Substitution Principle) :
            자식 클래스는 부모 클래스에서 가능한 행위를 수행할 수 있어야 한다.
            자식 클래스는 부모 클래스의 기능을 재정의하거나 확장할 수 있어야 한다. 하지만 부모 클래스의 기능을 변경해서는 안 된다.

        4. 인터페이스 분리 원칙 (Interface Segregation Principle) :
            클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안 된다.

        5. 의존 역전 원칙 (Dependency Inversion Principle) :
            고수준 모듈은 저수준 모듈에 의존하면 안 된다. 둘 다 추상화에 의존해야 한다.
            추상화는 세부 사항에 의존하면 안 된다. 세부 사항은 추상화에 의존해야 한다.
        