Interface를 상속하는 것은 클래스 뿐만 아니라 구조체에서도 가능.
    인터페이스가 인터페이스를 상속하는 것도 가능
    여러개의 인터페이스를 한꺼번에 상속하기 가능
    클래스는 한꺼번에 상속하면 다중상속으로 이어지기 쉬워 스파게티 코드가 될 가능성이 매우 높다.

추상클래스 (abstract)
    추상클래스는 인터페이스와 다르게 구현 부분을 가진다.
    일반클래스(자식, 손자클래스)와 달리 인스턴스를 가질 수 없다.

프로퍼티 (Property)
    객체지향에서 은닉성을 표현해야 하는데 객체의 데이터가
    의도치 않게 오염되는 것을 막기 위해 private나 protected같은 접근 한정자를
    이용해서 클래스 내의 필드(멤버변수)를 외부에서 보이지 않게 감추고,
    이 필드에 접근하는 메서드들을 public으로 따로 제공 하는것이 가능하다.
    C# 프로그래머도 이 방법을 그대로 따라할 수 있지만
    C# 언어는 이것보다 더 좋은 장치를 제공하는데, 그것이 바로 프로퍼티이다.

자동구현 프로퍼티
예시)
    private string name;
    public string? Name
    {
        // get {return name;}
        // set {name = value;}
        get; set;
    } = "Unknown";                      // 이건 .NET 7.0 이상부터 지원

프로퍼티와 생성자
    객체를 생성할 때 매개변수를 입력받아 객체의 각 필드를 초기화 하는 방법
    이번에는 다른 초기화 방법을 사용할 것인데, 바로 프로퍼티를 이용한 초기화 방법이다.
예시)
    static void Main()
    {
        BirthdayInfo obj = new BirthdayInfo()
        {
            Name = "Cinnamon", Birthday = new DateTime(2000, 8, 3)
        };
        Console.WriteLine($"Name : {obj.Name}");
        Console.WriteLine($"Birthday : {obj.Birthday}");
        Console.WriteLine($"Age : {obj.Age}");
    }
