PhotonCloud, PhotonNetwork를 할 예정

유니티 TPS
    인벤토리 UI에서 아이템을 추가나 삭제할 시 그대로 데이터가 반영되는지 확인


    자동차 움직여 보기
        WASD로 움직이기
        AI를 만들어서 스스로 움직이는 자동차 만들기

PlayerPrefs를 이용해서 데이터 저장하기 :
    Prefs : Preferences의 약자
    다만 보안성이 떨어지기 때문에 중요한 정보는 저장하지 않는 것이 좋다
    함수의 종류 :
        SetInt : 정수를 저장할 때 사용
        SetFloat : 실수를 저장할 때 사용
        SetString : 문자열을 저장할 때 사용
        SetBool : 참/거짓을 저장할 때 사용
        SetVector3 : 위치값을 저장할 때 사용
        SetQuaternion : 회전값을 저장할 때 사용
        SetColor : 색상을 저장할 때 사용
        SetObject : Object를 저장할 때 사용
        GetInt : 정수를 가져올 때 사용
        GetFloat : 실수를 가져올 때 사용
        GetString : 문자열을 가져올 때 사용
        GetBool : 참/거짓을 가져올 때 사용
        GetVector3 : 위치값을 가져올 때 사용
        GetQuaternion : 회전값을 가져올 때 사용
        GetColor : 색상을 가져올 때 사용
        GetObject : Object를 가져올 때 사용
        DeleteKey : 해당 키 삭제
        DeleteAll : 모든 데이터 삭제
        HasKey : 해당 키가 있는지 확인

바이너리 (Binary)을 이용해서 데이터 저장하기 :
    이진 데이터를 이용해서 저장하며, PlayerPrefs보다 보안성이 높다
    보안성이 높다는 것은 PlayerPrefs는 데이터를 알아볼 수 있지만, Binary는 데이터를 알아보기 어렵다
    물리적인 파일에 데이터를 기록하는 방법이다.
    using System.IO;                                        // 파일 입출력을 위한 Namespace
    using System.Runtime.Serialization.Formatters.Binary;   // 바이너리 형식으로 사용하기 위한 Namespace
        객체를 바이너리 형식으로 직렬화 및 역직렬화 작업을 수행할 때 필수적으로 포함해야 하는 구문. 이를 통하여 데이터의 저장 및 전송을 효율적으로 구현 가능
        직렬화 : 
            객체를 파일로 저장하거나 네트워크로 전송하기 위해 객체를 연속적인 데이터로 변환하는 것
            메모리에 흩어져 있는 데이터를 일렬로 나열하여 전송하거나 저장할 수 있도록 하는 것
        역직렬화 :
            직렬화된 데이터를 객체로 변환하는 것
            저장된 파일이나 네트워크로 전송된 데이터를 읽어와서 메모리에 객체로 만드는 것