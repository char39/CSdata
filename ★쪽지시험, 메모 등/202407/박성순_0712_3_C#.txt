1. 인터페이스와 클래스의 다른 점은 무엇인가?
    ★답 :
        인터페이스는 선언이 가능하나 구현이 불가능하다.
        클래스는 선언과 구현이 가능하다.
    의도된답 : 
        인터페이스는 클래스와 달리 내부에 메서드와 프로퍼티, 인덱서만 선언 가능하며,
        new 키워드를 통해 인스턴스화 할 수 없다.
        또한 접근 지정자가 기본적으로 public으로 설정되어 있다.
        따라서 해당 인터페이스를 상속받는 클래스를 만들어,
        업 캐스팅 형식의 참조를 통해 인터페이스를 활용해야 한다.
        인터페이스를 약속이라 생각하여
        인터페이스를 상속받는 모든 파생 클래스들은 인터페이스에
        선언되어 있는 함수를 무조건 정의해야 한다.
        따라서 어떤 프로그래머가 해당 클래스가 어떤 인터페이스를 상속받고 있는지만 알아도,
        해당 클래스가 어떤 기능을 하는지 유추할 수 있다.
            위와 같은 점들이 인터페이스와 클래스의 큰 차이점이다.

2. 인터페이스와 추상클래스가 다른 점은 무엇인가?
    ★답 :
        인터페이스는 추상클래스와 다르게 구현이 불가능하다.
    의도된답 : 
        추상클래스는 인터페이스와 기본적으로 역할(함수의 정의를 강요)은 비슷하지만,
        인터페이스와 달리 데이터(변수)를 선언할 수 있다.
        또한 필요에 의해 함수를 정의해도 괜찮다.
        추상클래스에는 해당 클래스에서만 사용 가능한 추상메서드라는 것이 존재하는데,
        이는 인터페이스의 메서드와 같은 역할을 한다.
        하지만 모든 추상클래스내의 메서드와 데이터는 private으로 설정되어 있기 때문에,
        추상메서드의 접근 지정자를 public으로 설정하는 것을 추천한다.        

3. 추상클래스와 일반클래스의 다른 점은 무엇인가?
    ★답 :
        추상클래스는 일반클래스와 달리 인스턴스를 생성할 수 없다.
    의도된답 : 
        추상클래스는 일반클래스와 달리 인스턴스를 생성할 수 없다.
        추상클래스는 부모클래스이기 때문에 동적할당을 할 필요도 없지만
        C#에서는 class 키워드 앞에 abstract를 넣으면 동적할당 인스턴스가 안된다.
        추상클래스는 인터페이스처럼 추상메서드가 있어서 상속받은 클래스(자식)는
        추상메서드를 반드시 구현해야 한다.
        일반클래스는 대부분 자식이나 손자 클래스이고, 동적 할당이 가능하다.
        일반클래스는 인터페이스나 추상클래스를 상속받은 실행결과를 가진다.