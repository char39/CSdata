자료구조 알고리즘

1. 가변길이 배열
    ArrayList (비제네릭) :
        컬렉션 이란, 같은 성격을 가진 데이터의 모음을 담는 자료구조. 배열이라 한다.
        ArrayList, Queue, Stack, HashTable 등이 있다.
        배열과 달리 컬렉션을 생성할 때, 크기를 지정할 필요가 없다. 자동으로 크기가 조절된다. (가변길이)
        유니티에서는 사용하지 않는다. (속도가 느리다)
            ArrayList는 object 타입을 사용한다.
            object 타입을 사용하기 때문에, 모든 자식 오브젝트를 담을 수 있다. (다형성)
            형변환을 위한 박싱, 언박싱이 발생하기 때문에 속도가 느리다.

    Queue (비제네릭) :
        큐는 선입선출(FIFO) 구조를 가진다.
        Enqueue() : 큐에 데이터를 추가한다.
        Dequeue() : 큐에서 데이터를 꺼낸다.
        Peek() : 큐에서 데이터를 확인한다.

    Stack (비제네릭) :
        스택은 후입선출(LIFO) 구조를 가진다.
        Push() : 스택에 데이터를 추가한다.
        Pop() : 스택에서 데이터를 꺼낸다.
        Peek() : 스택에서 데이터를 확인한다.

    HashTable (비제네릭) :
        해시테이블은 키와 값으로 이루어진 데이터를 저장한다.
        키를 통해 값을 찾는다.
        키는 중복될 수 없다.
        키와 값은 object 타입을 사용한다.
    
    Indexer (인덱서) :
        인덱서는 클래스의 인스턴스를 배열처럼 사용할 수 있게 해준다.
        인덱서는 this 키워드를 사용한다.
        인덱서는 클래스 내부에 배열을 선언하고, 인덱스를 사용하여 배열에 접근할 수 있게 해준다.

    Dictionary와 Hashtable의 주요 차이점:
        타입 안전성(Type Safety):
            Dictionary<TKey, TValue>는 제네릭을 사용하여 키와 값의 타입을 명시적으로 정의합니다. 이는 타입 안전성을 제공하며, 컴파일 시간에 타입 체크가 가능합니다.
            Hashtable은 키와 값 모두를 object 타입으로 저장합니다. 이는 박싱과 언박싱이 필요하며, 타입 안전성이 떨어집니다.
        성능(Performance):
            Dictionary는 제네릭을 사용하기 때문에 타입 변환(박싱 및 언박싱)이 필요 없어 Hashtable에 비해 성능상 이점이 있습니다.
        버전(Version):
            Dictionary는 .NET 2.0부터 도입된 제네릭 컬렉션의 일부입니다.
            Hashtable은 .NET의 초기 버전부터 있었던 컬렉션으로, 제네릭이 도입되기 전부터 사용되어 왔습니다.
        스레드 안전(Thread Safety):
            Dictionary는 기본적으로 스레드 안전하지 않습니다. 여러 스레드에서 동시에 액세스할 경우 ConcurrentDictionary<TKey, TValue>를 사용하는 것이 좋습니다.
            Hashtable은 스레드 안전한 버전인 Synchronized 메서드를 통해 스레드 안전한 컬렉션을 얻을 수 있지만, 이는 성능 저하를 일으킬 수 있습니다.
        사용 권장(Recommendation):
            현대의 Cs 애플리케이션에서는 타입 안전성과 성능 이점 때문에 Dictionary의 사용이 권장됩니다.
            Hashtable은 구식이며, 특별한 경우가 아니라면 Dictionary를 사용하는 것이 좋습니다.
            결론적으로, Dictionary는 타입 안전성, 성능, 최신 Cs 기능을 활용할 수 있는 장점 때문에 Hashtable보다 선호되는 컬렉션입니다.

    List (제네릭)

    Delegate (대리자) :

