1.
배열은 어떨 때 사용하는 것이 유용한가?
	★답 : 동일한 변수 이름의 하위 정보가 많을 경우, 이 때 사용하는 것이 유용함.
	ex) classP[0][0] =	, classP[2][1] = 
	    1반의 1번은 누구, 3반의 2번은 누구
2.
배열을 초기화할 때 스택과 힙에 각각 저장되는 정보는 무엇인가?
	★답 : 배열을 초기화할 때 스택에는 힙의 접근 주소값, 힙에는 데이터(값)이 저장된다.
	
3.
long[] LongArray = {1,2,3,4} 배열이 있다.
for문을 사용하여 요소의 모든 값을 1씩 증가시키고, 다시 출력하세요.
코딩한 것 올리기.
	★답 :
namespace Csharp07_03NETCORE
{
    internal class Test
    {
        static void Main()
        {
            long[] LongArray = {1, 2, 3, 4};
            for (int i = 0; i < LongArray.Length; i++)
            {
                LongArray[i] = LongArray[i] + 1;
                Console.WriteLine(LongArray[i]);
            }
        }
    }
}

4.
int[] myArray = new int[5] 배열을 선언했다.
여기서 각 요소들을 참조하거나 편집할 때, 왜 myArray[5]는 사용할 수 없는지 설명하세요.
	★답 : 배열을 5개 선언하면, 0,1,2,3,4 이렇게 5개 선언되어 [5]는 6번째 배열로,
	존재하지 않기에 사용할 수 없다.

5.
배열을 복사할 때 원래 배열의 값을 바꾸면 복사된 배열의 값도 바뀐다.
그 이유를 설명하세요.
	★답 : 배열의 복사는 얕은 복사, 깊은 복사가 있는데
	얕은 복사는 Class source = target 처럼 주소값을 복사하여 주소에 접근한 값을
	변경하기 때문에, target의 데이터 주소값과 source의 데이터 주소값이 같아
	한 곳에서 수정하면 다른 곳도 같이 수정되기 때문.
	깉은 복사는 값을 복사하여 이러한 문제가 없음.

6.
어느 부분이 틀렸는지 지적하고 올바르게 고치세요.
	(1)	int[] array;
		array = {0,1,2,3};
	(2)	int[]array;
		Console.WriteLine(array[0]);
	(3)	int[] array = new int[3];
		Console.WriteLine(array[3]);
	(4)	int[]array = new int[];
		int[] array = new int[3]{0,1,2,3};
	
	★답 : 
	(1)번은 선언과 동시에 초기화 하면 해결.
	(2)번은 값이 할당되지 않은 array[0]을 불러왔기 때문. 값을 선언 후 할당해주면 해결.
	(3)번은 배열 3개를 선언했으나, [3]은 4번째 배열이기 때문에 이 또한 할당되지 않아서
		생기는 오류. array[3]을 array[4]로 올려주고 선언해주면 해결
	(4)번은 동일한 지역 변수가 이미 선언되어 있기 때문에 1번째 줄을 없애고,
		2번째 줄의 new int[3]을 new int[]로 수정하면 올바르게 해결
	
7.
배열을 구조체와 비교해서 같은 점과 다른 점을 각각 설명하세요.
	★답 : 같은 점 : 여러 데이터를 하나의 이름으로 묶어서 저장함.
	다른 점 : 배열은 하나의 데이터 종류로 저장하지만, 구조체는 다양한 데이터 종류로 저장가능
	
