유니티

    A,D키는 회전, W,S키는 전진, 후진으로 만들어보자
    C# 인터페이스를 사용한 느슨한 커플링
    슈터 게임의 총 제작 방법
    라인렌더러를 사용해 광선그리기
    레이캐스트를 사용해 탄알 발사 구현

    코루틴을 사용해 대기시간 삽입
    IK를 사용해 총을 잡도록 애니메이션 변경하기

    게임을 할 때 적 캐릭터나 상자, 물체 등 다양한 오브젝트를 공격할 수 있다.
    게임 내 오브젝트들은 종류별로 공격을 받았을 때 반응이 서로 다르다.  ex) 적 : hp가 깎임, 상자 : 파괴 후 아이템 드랍 등
    이러한 상황을 처리하기 위해 오브젝트들은 공격을 받았을 때 어떻게 반응할지를 정의한 인터페이스를 구현한다.

    이러한 상황을 처리하는 방법 중 제일 나쁜 방법은,
        if문을 사용하여 각 오브젝트의 종류에 따라 다른 동작을 구현하는 것이다.
    이 것을 사용하지 않으려고 인터페이스를 사용하는 것이다.
    
    공격 받는 물체 오브젝트는 IDamageable 인터페이스를 구현하도록 한다.
    IDamageable 인터페이스를 사용하면 총으로 어떤 물체를 공격했을 때, 물체가 어떻게 반응할지를 정의할 수 있다.




    Animator Controller - Layer
        여러 개의 레이어를 만들어 각 레이어에 다른 애니메이션을 적용할 수 있는데, 재생하는 애니메이션은 레이어의 Weight에 따라 결정된다.
        Weight :
            레이어의 가중치를 나타내는 값으로, 레이어의 Weight가 높을수록 해당 레이어의 애니메이션이 우선적으로 재생된다.
            레이어의 Weight를 조절하여 여러 개의 애니메이션을 조합할 수 있으며, 레이어의 Weight를 조절하여 여러 개의 애니메이션을 조합할 수 있다.
        Blending :
            레이어의 애니메이션을 조합하는 방법으로, Override, Additive가 있는데,
            Override는 레이어의 애니메이션을 완전히 대체하는 방식으로, 레이어의 애니메이션을 완전히 대체하는 방식으로 사용된다.
            Additive는 레이어의 애니메이션을 더하는 방식으로, 레이어의 애니메이션을 더하는 방식으로 사용된다.
        Avatar Mask :
            레이어에서 재생할 애니메이션을 제한하는 방법으로, 레이어에서 재생할 애니메이션을 제한하는 방법으로 사용된다.
            Avatar Mask를 사용하면 특정 부분의 애니메이션을 제한할 수 있으며, 특정 부분의 애니메이션을 제한할 수 있다.
        
        예를 들어, 1번째 레이어에 Weight을 1, 2번째 레이어에 Weight을 0.5로 설정하면 1번째 레이어의 애니메이션이 2번째 레이어의 애니메이션보다 우선적으로 재생된다.
        이 때, Override를 사용하면 1번째 레이어의 애니메이션이 2번째 레이어의 애니메이션을 완전히 대체하며,
        Additive를 사용하면 1번째 레이어의 애니메이션을 0.5만큼 더하여 2번째 레이어의 애니메이션을 조합한다.

        이렇게 레이어를 나누는 이유는, 더 적은 애니메이션 클립으로 다양한 애니메이션을 만들 수 있기 때문이다.
        그렇지 않으면 각 애니메이션 클립을 모두 만들어야 하기 때문에, 레이어를 사용하여 다양한 애니메이션을 만들 수 있다.

    시네머신 카메라 (Cinemachine)
        시네머신으로 추적 카메라를 만들어보자.
    
    IK 역운동학 (Inverse Kinematics)
        3D 그래픽과 애니메이션에서 사용하는 중요한 기술로, 캐릭터의 특정 부분이 목표 위치에 도달하도록 관절의 각도를 자동으로 계산하는 방법.
        이는 특히 캐릭터가 무기 등을 장착하거나 특정 위치에 도달할 때 사용되며, 캐릭터의 움직임이 자연스럽게 보이도록 하는 데 사용된다.
        플레이어나 적 캐릭터에 무기 등 장착시 무기 등을 기준으로 애니메이션이 재생되는 것을 구현할 때 사용함.

    후처리 (PostProcessing)
        게임 화면에 특정 효과를 적용하는 기술로, 게임 화면을 더욱 생동감 있게 만들어주는 기술.
        주로 화면의 색감을 조정하거나 블러 효과를 적용하는 데 사용되며, 게임의 분위기나 느낌을 강조하는 데 사용된다.
        게임 화면에 필터를 적용하여 화면의 색감이나 밝기를 조정하거나 블러 효과를 적용하여 게임 화면을 더욱 생동감 있게 만들어주는 기술.

    네트워크 게임을 PUN2를 사용하여 구현해보자.
        PUN2 (Photon Unity Networking 2)는 유니티에서 사용할 수 있는 네트워크 라이브러리로, 멀티플레이어 게임을 구현할 때 사용된다.
        PUN2를 사용하면 서버와 클라이언트 간의 통신을 쉽게 구현할 수 있으며, 멀티플레이어 게임을 빠르게 개발할 수 있다.
        PUN2를 사용하여 네트워크 게임을 구현할 때는 서버와 클라이언트 간의 통신을 쉽게 구현할 수 있으며, 멀티플레이어 게임을 빠르게 개발할 수 있다.



    Realtime Lighting - Realtime Global Illumination :
        실시간 조명 (Realtime Lighting)은 게임 화면에 빛과 그림자를 표현하는 기술로, 게임 화면을 더욱 생동감 있게 만들어주는 기술.
        실시간 조명을 사용하면 빛의 위치나 색상을 조정하여 게임 화면에 다양한 효과를 적용할 수 있으며, 게임의 분위기나 느낌을 강조하는 데 사용된다.
        다만, 실시간 조명은 게임 화면에 빛과 그림자를 실시간으로 표현하기 때문에 게임의 성능에 영향을 줄 수 있다.
        실시간 전역 조명 (Realtime Global Illumination)은 게임 화면에 빛과 그림자를 표현하는 기술이다.
        
    Baked Lighting - Baked Global Illumination :
        베이크드 조명 (Baked Lighting)은 게임 화면에 미리 계산된 빛과 그림자를 표현하는 기술로, 게임 화면을 더욱 생동감 있게 만들어주는 기술.
        베이크드 조명을 사용하면 게임 화면에 미리 계산된 빛과 그림자를 적용할 수 있으며, 게임의 분위기나 느낌을 강조하는 데 사용된다.
        다만, 베이크드 조명은 미리 계산된 빛과 그림자를 사용하기 때문에 게임 화면이 동적으로 변하는 상황에는 적합하지 않다.
        베이크드 전역 조명 (Baked Global Illumination)은 게임 화면에 미리 계산된 빛과 그림자를 표현하는 기술이다.
