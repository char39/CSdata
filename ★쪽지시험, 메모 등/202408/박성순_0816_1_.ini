유니티
    Interface를 사용하지 않고 OnTriggerEnter, OnCollisionEnter 등 일일히 if문으로 충돌 처리를 한다면,
    충돌 처리를 위한 코드가 매우 길어질 것이다. 아주 나쁜 방법이다.

    그래서 Interface를 사용하면 일일히 조건 검사를 하지 않고, Interface를 상속받은 클래스의 함수를 호출하여 상황에 맞게 코드를 구현할 수 있다.
    이를 느슨한 결합 (Loose Coupling)이라고 한다.
    느슨한 결합은 특정 클래스의 구현이 변경되어도 다른 클래스에 영향을 주지 않아, 유연하게 코드를 변경할 수 있다.

    다형성 오버라이드 (Polymorphism Override) :
        객체지향의 특징 중 하나로, (상속성, 다형성, 캡슐화)를 지원한다.

        virtual 키워드 :
            virtual 키워드는 메서드를 오버라이드할 수 있도록 지정하는 키워드이다.
            virtual 키워드가 붙은 메서드는 자식 클래스에서 재정의할 수 있다.
        ex)
            부모 클래스 :
            public virtual void Attack()
            {
                Debug.Log("공격!");
            }

            자식 클래스 :
            public override void Attack()
            {
                Debug.Log("강한 공격!");
            }


    LivingEntity 클래스 :
        LivingEntity 클래스는 모든 생명체의 기본적인 속성을 가지고 있다.
        이 클래스는 추상 클래스로 선언되어 있으며, 추상 클래스는 인스턴스를 생성할 수 없다.
        추상 클래스는 상속을 통해 자식 클래스에서 구현할 메서드를 강제할 수 있다.
        ex)
            적 AI와 플레이어 AI는 다르지만, 둘 다 생명체이므로 공통된 속성을 가질 수 있다.
            예를 들어 둘 다 체력, 방어력, 이동 속도, 공격력 등을 가질 수 있다.
            이런 경우 LivingEntity 클래스를 상속받아 구현하면 된다.
        상속을 하는 이유는 코드의 재사용성과 유지보수성을 높이기 위함이다.
        원래 있던 프로젝트가 더 많은 기능을 확장해야 할 때, 상속을 통해 새로운 기능을 추가할 수 있다.


    SpawnPoint 랜덤하게 생성
    시작 체력이 랜덤하게 생성. 체력이 높을수록 색깔을 빨갛게 지정

    적 생성기 Wave
    새로운 Wave가 시작될 때마다 적을 한꺼번에 생성
    현재 Wave의 적이 모두 사망해야 다음 Wave가 시작
    Wave가 증가할 때마다 한번에 생성되는 적의 수가 증가
    적을 생성할 때 전체 능력치를 랜덤하게 설정
    게임 오버시 적 생성 중단