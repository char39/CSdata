유니티
    포톤클라우드를 활용해 네트워크 슈팅 게임을 제작
    기본적인 로비 룸을 비롯해서 네트워크 동기화. RPC와 채팅로직 등을 구현하고
    유니버셜 렌더 파이프라인에서 포스트 프로세싱을 통해 시각적 효과를 높은 프로젝트를 제작한다.

C#
    1.  아래의 예제에 delegate를 이용 하여 메인 메서드에서 실행 결과 값이 나오도록 하세요.
        실행 결과 : Plus하는 메서드를 대리해서 7이 출력되고
        Plus()라는 함수를 대리해서 7이 출력
        Minus()라는 함수를 대리해서 2가 출력 되게 메인 함수를 채우세요

        namespace Delegate
        {
            delegate int MyDelegate( int a, int b);

            class Calculator
            {
                public int Plus(int a, int b)
                {
                    return a + b;
                }

                public static int Minus(int a, int b)
                {
                    return a - b;
                }
            }

            class MainApp
            {
                static void Main(string[] args)
                {

                }
            }
        }
    
        답 :
            delegate int MyDelegate(int a, int b);
            public class Calculator
            {
                public int Plus(int a, int b) => a + b;
                public static int Minus(int a, int b) => a - b;
            }
            internal class Program
            {
                static void Main()
                {
                    Calculator cal = new();
                    MyDelegate del = new(cal.Plus);
                    Console.WriteLine(del(3, 4));
                    del = new(Calculator.Minus);
                    Console.WriteLine(del(4, 2));
                }
            }
        
    2.  위의 예제에서 BubbleSort 함수의 내용과 메인함수에서도 내용을 채우세요.
        실행 결과 : Sorting ascending > 오름 차순 결과 출력
                 Sorting descending > 내림 차순 결과 출력

        namespace UsingCallback
        {
            delegate int Compare(int a, int b);

            class MainApp
            {
                static int AscendCompare(int a, int b)
                {
                    if (a > b)
                        return 1;
                    else if( a == b )
                        return 0;
                    else
                        return -1 ; 
                }

                static int DescendCompare(int a, int b)
                {
                    if (a < b)
                        return 1;
                    else if (a == b)
                        return 0;
                    else
                        return -1;
                }

                static void BubbleSort(int[] DataSet, Compare Comparer) 
                { 
                
                    
                }

                static void Main(string[] args)
                {
                    int[] array = { 3, 7, 4, 2, 10,1,5,15,8 };

                    

                    Console.WriteLine();
                }
            }
        }

        답 : 
            delegate int Compare(int a, int b);
            internal class Program
            {
                static int AscendCompare(int a, int b)
                {
                    if (a > b) return 1;
                    else if (a == b) return 0;
                    else return -1;
                }
                static int DescendCompare(int a, int b)
                {
                    if (a < b) return 1;
                    else if (a == b) return 0;
                    else return -1;
                }

                static void BubbleSort(int[] DataSet, Compare Comparer)
                {
                    int i, j, temp;
                    for (i = 0; i < DataSet.Length - 1; i++)
                    {
                        for (j = 0; j < DataSet.Length - (i + 1); j++)
                        {
                            if (Comparer(DataSet[j], DataSet[j + 1]) > 0)
                            {
                                temp = DataSet[j + 1];
                                DataSet[j + 1] = DataSet[j];
                                DataSet[j] = temp;
                            }
                        }
                    }
                }

                static void Main(string[] args)
                {
                    int[] array = [ 3, 7, 4, 2, 10, 1, 5, 15, 8 ];

                    Console.WriteLine("Sorting ascending");
                    BubbleSort(array, AscendCompare);
                    foreach (int a in array)
                        Console.Write(a + " ");
                    Console.WriteLine();

                    Console.WriteLine("Sorting descending");
                    BubbleSort(array, DescendCompare);
                    foreach (int a in array)
                        Console.Write(a + " ");
                    Console.WriteLine();
                }
            }
    


    3.  어떤 자료형이라도 다 정렬 할 수 있게 일반화 프로그래밍을 구현 하여 어떤 자료형이라도 다 출력 하세요.

        static void Main(string[] args)
        {  
            int[] array = { 3, 7, 4, 2, 10 };

            Console.WriteLine("Sorting ascending...");
            

            for (int i = 0; i < array.Length; i++)
                Console.Write($"{array[i]} ");

            string[] array2 = { "abc", "def", "ghi", "jkl", "mno" };

            Console.WriteLine("\nSorting descending...");
            

            for (int i = 0; i < array2.Length; i++)
                Console.Write($"{array2[i]} ");

            Console.WriteLine();
        }

        답 : 
            delegate int Compare<T>(T a, T b);
            internal class Program
            {
                static int AscendCompare<T>(T a, T b) where T : IComparable<T>
                {
                    return a.CompareTo(b);
                }
                static int DescendCompare<T>(T a, T b) where T : IComparable<T>
                {
                    return a.CompareTo(b);
                }

                static void BubbleSort<T>(T[] DataSet, Compare<T> Comparer)
                {
                    int i, j;
                    T temp;
                    for (i = 0; i < DataSet.Length - 1; i++)
                    {
                        for (j = 0; j < DataSet.Length - (i + 1); j++)
                        {
                            if (Comparer(DataSet[j], DataSet[j + 1]) > 0)
                            {
                                temp = DataSet[j + 1];
                                DataSet[j + 1] = DataSet[j];
                                DataSet[j] = temp;
                            }
                        }
                    }
                }

                static void Main()
                {
                    int[] array = [3, 7, 4, 2, 10];
                    Console.WriteLine("Sorting ascending...");
                    BubbleSort(array, AscendCompare);
                    for (int i = 0; i < array.Length; i++)
                        Console.Write($"{array[i]} ");

                    string[] array2 = ["abc", "def", "ghi", "jkl", "mno"];
                    Console.WriteLine("\nSorting descending...");
                    BubbleSort(array2, DescendCompare);
                    for (int i = 0; i < array2.Length; i++)
                        Console.Write($"{array2[i]} ");
                    Console.WriteLine();
                }
            }